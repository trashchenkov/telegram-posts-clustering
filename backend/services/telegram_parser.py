from datetime import datetime, timedelta
from typing import List, Optional
import logging
import asyncio
import random
from concurrent.futures import ThreadPoolExecutor
import re
import os
import httpx
from bs4 import BeautifulSoup

from models.post import RawPost

logger = logging.getLogger(__name__)

class TelegramParser:
    def __init__(self, max_workers: int = 5):
        self.max_workers = max_workers
        self.executor = ThreadPoolExecutor(max_workers=max_workers)
        
        # Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è fallback
        self.mock_texts = [
            "üöÄ –ù–æ–≤—ã–π —Ä–µ–ª–∏–∑ GPT-5! –†–µ–≤–æ–ª—é—Ü–∏—è –≤ –æ–±–ª–∞—Å—Ç–∏ –ò–ò –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è",
            "üìä –ê–Ω–∞–ª–∏–∑ —Ä—ã–Ω–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç: Bitcoin –¥–æ—Å—Ç–∏–≥ –Ω–æ–≤–æ–≥–æ –º–∞–∫—Å–∏–º—É–º–∞",
            "üíº –û—Ç–∫—Ä—ã—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏—è Senior Python Developer –≤ –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–µ",
            "üî¨ –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø–æ–∫–∞–∑–∞–ª–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ ML",
            "üòÇ –ú–µ–º –¥–Ω—è: –∫–æ–≥–¥–∞ –∫–æ–¥ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–≤–æ–≥–æ —Ä–∞–∑–∞",
            "üéØ –°—Ç–∞—Ä—Ç–∞–ø –ø—Ä–∏–≤–ª–µ–∫ $50M –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –Ω–∞ —Ä–∞–∑–≤–∏—Ç–∏–µ AI –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã",
            "üìö –ù–æ–≤—ã–π –∫—É—Ä—Å –ø–æ –º–∞—à–∏–Ω–Ω–æ–º—É –æ–±—É—á–µ–Ω–∏—é –æ—Ç Stanford",
            "‚ö° –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Telegram: –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤",
            "üåü –ò–Ω—Ç–µ—Ä–≤—å—é —Å –æ—Å–Ω–æ–≤–∞—Ç–µ–ª–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ AI —Å—Ç–∞—Ä—Ç–∞–ø–∞",
            "üîß –¢—É—Ç–æ—Ä–∏–∞–ª: –∫–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å CI/CD –¥–ª—è Python –ø—Ä–æ–µ–∫—Ç–æ–≤",
            "üî• –ù–æ–≤–∞—è –º–æ–¥–µ–ª—å –æ—Ç OpenAI –ø—Ä–µ–≤–∑–æ—à–ª–∞ –≤—Å–µ –æ–∂–∏–¥–∞–Ω–∏—è",
            "üí° Breakthrough –≤ –æ–±–ª–∞—Å—Ç–∏ –∫–≤–∞–Ω—Ç–æ–≤—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π",
            "üìà –†–æ—Å—Ç –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ AI —Å—Ç–∞—Ä—Ç–∞–ø—ã –Ω–∞ 300%",
            "üé® –ì–µ–Ω–µ—Ä–∞—Ç–∏–≤–Ω—ã–π AI —Å–æ–∑–¥–∞–µ—Ç –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏—Å–∫—É—Å—Å—Ç–≤–∞",
            "üõ°Ô∏è –ù–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã –∑–∞—â–∏—Ç—ã –æ—Ç AI-–∞—Ç–∞–∫",
            "ü§ñ –†–æ–±–æ—Ç—ã –Ω–∞—á–∏–Ω–∞—é—Ç –ø–æ–Ω–∏–º–∞—Ç—å —á–µ–ª–æ–≤–µ—á–µ—Å–∫–∏–µ —ç–º–æ—Ü–∏–∏",
            "üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –æ –±—É–¥—É—â–µ–º AI",
            "üíª –ù–æ–≤—ã–π —Ñ—Ä–µ–π–º–≤–æ—Ä–∫ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ AI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π",
            "üéì –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –∑–∞–ø—É—Å–∫–∞—é—Ç –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø–æ AI",
            "üåç AI –ø–æ–º–æ–≥–∞–µ—Ç —Ä–µ—à–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã"
        ]
    
    async def _parse_channel_with_http(self, channel: str, hours_back: int = 24, limit: int = 50) -> List[RawPost]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ t.me"""
        posts = []
        cutoff_time = datetime.now() - timedelta(hours=hours_back)
        
        try:
            url = f"https://t.me/s/{channel}"
            logger.info(f"üåê –ü–æ–ø—ã—Ç–∫–∞ HTTP –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ {channel}: {url}")
            
            async with httpx.AsyncClient(timeout=30.0) as client:
                response = await client.get(url)
                response.raise_for_status()
                
                soup = BeautifulSoup(response.text, 'html.parser')
                
                # –ò—â–µ–º –ø–æ—Å—Ç—ã –≤ HTML
                post_elements = soup.find_all('div', class_='tgme_widget_message')
                
                post_count = 0
                for element in post_elements[:limit]:
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ—Å—Ç–∞
                        post_link_elem = element.find('a', class_='tgme_widget_message_date')
                        if not post_link_elem:
                            continue
                            
                        post_link = post_link_elem.get('href', '')
                        post_id = post_link.split('/')[-1] if post_link else str(post_count)
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è
                        time_elem = element.find('time')
                        if time_elem and time_elem.get('datetime'):
                            post_time = datetime.fromisoformat(time_elem['datetime'].replace('Z', '+00:00'))
                            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                            if post_time < cutoff_time:
                                continue
                        else:
                            # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–∏–Ω—É—Å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                            post_time = datetime.now() - timedelta(minutes=random.randint(0, hours_back * 60))
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
                        text_elem = element.find('div', class_='tgme_widget_message_text')
                        post_text = text_elem.get_text(strip=True) if text_elem else None
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞
                        has_media = bool(element.find('a', class_='tgme_widget_message_photo_wrap') or 
                                       element.find('video') or 
                                       element.find('div', class_='tgme_widget_message_video'))
                        
                        if post_text or has_media:  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
                            post = RawPost(
                                id=f"{channel}_http_{post_id}_{int(post_time.timestamp())}",
                                channel_name=channel,
                                publication_datetime=post_time.isoformat(),
                                post_link=post_link or f"https://t.me/{channel}/{post_id}",
                                post_text=post_text,
                                has_media=has_media
                            )
                            posts.append(post)
                            post_count += 1
                            
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ {channel}: {e}")
                        continue
                
                logger.info(f"‚úÖ HTTP: –Ω–∞–π–¥–µ–Ω–æ {post_count} —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ {channel}")
                return posts
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è HTTP –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel}: {e}")
            raise
    
    def _parse_channel_with_snscrape(self, channel: str, hours_back: int = 24, limit: int = 50) -> List[RawPost]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ snscrape"""
        posts = []
        cutoff_time = datetime.now() - timedelta(hours=hours_back)
        
        try:
            import snscrape.modules.telegram as snstelegram
            
            logger.info(f"üîß –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ {channel} —á–µ—Ä–µ–∑ snscrape...")
            
            # –°–æ–∑–¥–∞–µ–º scraper –¥–ª—è –∫–∞–Ω–∞–ª–∞
            scraper = snstelegram.TelegramChannelScraper(channel)
            
            post_count = 0
            for i, item in enumerate(scraper.get_items()):
                if i >= limit:
                    logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç {limit} –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel}")
                    break
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                if item.date < cutoff_time:
                    logger.info(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –≥—Ä–∞–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏ {hours_back}—á –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel}")
                    break
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
                post_text = None
                if hasattr(item, 'content') and item.content:
                    post_text = item.content
                elif hasattr(item, 'rawContent') and item.rawContent:
                    post_text = item.rawContent
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞
                has_media = False
                if hasattr(item, 'media') and item.media:
                    has_media = True
                elif hasattr(item, 'photo') and item.photo:
                    has_media = True
                elif hasattr(item, 'video') and item.video:
                    has_media = True
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ—Å—Ç
                post_link = f"https://t.me/{channel}/{item.id}" if hasattr(item, 'id') else item.url
                
                post = RawPost(
                    id=f"{channel}_snscrape_{item.id}_{int(item.date.timestamp())}",
                    channel_name=channel,
                    publication_datetime=item.date.isoformat(),
                    post_link=post_link,
                    post_text=post_text,
                    has_media=has_media
                )
                posts.append(post)
                post_count += 1
                
            logger.info(f"‚úÖ snscrape: –Ω–∞–π–¥–µ–Ω–æ {post_count} —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ {channel}")
            return posts
            
        except ImportError as e:
            logger.error(f"‚ùå snscrape –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
            raise
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è snscrape –æ—à–∏–±–∫–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel}: {e}")
            raise
    
    async def _parse_channel_sync(self, channel: str, hours_back: int = 24, limit: int = 50) -> List[RawPost]:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ —Å fallback —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π"""
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 1: HTTP –ø–∞—Ä—Å–∏–Ω–≥
        try:
            return await self._parse_channel_with_http(channel, hours_back, limit)
        except Exception as e:
            logger.warning(f"HTTP –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {channel}: {e}")
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 2: snscrape
        try:
            return self._parse_channel_with_snscrape(channel, hours_back, limit)
        except Exception as e:
            logger.warning(f"snscrape –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è {channel}: {e}")
        
        # –°—Ç—Ä–∞—Ç–µ–≥–∏—è 3: Mock –¥–∞–Ω–Ω—ã–µ
        logger.info(f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel}")
        return self._generate_mock_posts(channel, hours_back, limit)
    
    def _generate_mock_posts(self, channel: str, hours_back: int = 24, limit: int = 50) -> List[RawPost]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç mock –ø–æ—Å—Ç—ã –¥–ª—è fallback"""
        posts = []
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ (3-8 –Ω–∞ –∫–∞–Ω–∞–ª)
        num_posts = random.randint(3, min(8, limit))
        
        for i in range(num_posts):
            # –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö hours_back —á–∞—Å–æ–≤
            random_minutes = random.randint(0, hours_back * 60)
            post_time = datetime.now() - timedelta(minutes=random_minutes)
            
            # –°–ª—É—á–∞–π–Ω—ã–π —Ç–µ–∫—Å—Ç
            post_text = random.choice(self.mock_texts)
            
            # –°–ª—É—á–∞–π–Ω–æ–µ –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞
            has_media = random.choice([True, False])
            
            post = RawPost(
                id=f"{channel}_mock_{int(post_time.timestamp())}_{i}",
                channel_name=channel,
                publication_datetime=post_time.isoformat(),
                post_link=f"https://t.me/{channel}/{random.randint(1000, 9999)}",
                post_text=post_text,
                has_media=has_media
            )
            posts.append(post)
        
        logger.info(f"üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {num_posts} mock –ø–æ—Å—Ç–æ–≤ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel}")
        return posts
    
    async def parse_channel(self, channel: str, hours_back: int = 24, limit: int = 50) -> List[RawPost]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        return await self._parse_channel_sync(channel, hours_back, limit)
    
    async def parse_channels(self, channels: List[str], hours_back: int = 24, limit: int = 50) -> List[RawPost]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [
            self.parse_channel(channel, hours_back, limit) 
            for channel in channels
        ]
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
        all_posts = []
        successful_channels = 0
        real_posts = 0
        mock_posts = 0
        
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞ {channels[i]}: {str(result)}")
                # –î–æ–±–∞–≤–ª—è–µ–º mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–µ—É–¥–∞—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
                mock_data = self._generate_mock_posts(channels[i], hours_back, limit)
                all_posts.extend(mock_data)
                mock_posts += len(mock_data)
            else:
                all_posts.extend(result)
                successful_channels += 1
                
                # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ vs mock –ø–æ—Å—Ç—ã
                for post in result:
                    if "_mock_" in post.id:
                        mock_posts += 1
                    else:
                        real_posts += 1
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        all_posts.sort(
            key=lambda x: datetime.fromisoformat(x.publication_datetime), 
            reverse=True
        )
        
        logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(all_posts)} –ø–æ—Å—Ç–æ–≤ –∏–∑ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤")
        logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {real_posts} —Ä–µ–∞–ª—å–Ω—ã—Ö, {mock_posts} mock –ø–æ—Å—Ç–æ–≤")
        logger.info(f"üéØ –£—Å–ø–µ—à–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {successful_channels}/{len(channels)}")
        
        return all_posts
    
    def __del__(self):
        if hasattr(self, 'executor'):
            self.executor.shutdown(wait=True) 