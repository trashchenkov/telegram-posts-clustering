from datetime import datetime, timedelta, timezone
from typing import List, Optional
import logging
import asyncio
import random
from concurrent.futures import ThreadPoolExecutor
import re
import os
import httpx
from bs4 import BeautifulSoup

from models.post import RawPost

logger = logging.getLogger(__name__)

class TelegramParser:
    def __init__(self, max_workers: int = 5):
        self.max_workers = max_workers
        self.executor = ThreadPoolExecutor(max_workers=max_workers)
        
    def _extract_formatted_text(self, text_elem) -> str:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –±–∞–∑–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not text_elem:
            return None
            
        # –ó–∞–º–µ–Ω—è–µ–º <br> –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        for br in text_elem.find_all('br'):
            br.replace_with('\n')
        
        # –ó–∞–º–µ–Ω—è–µ–º –±–ª–æ—á–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
        for block in text_elem.find_all(['div', 'p']):
            if block.get_text(strip=True):  # –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç
                block.insert_after('\n')
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç
        text = text_elem.get_text()
        
        # –û—á–∏—â–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
        text = re.sub(r'\n\s*\n\s*\n+', '\n\n', text)  # –£–±–∏—Ä–∞–µ–º —Ç—Ä–æ–π–Ω—ã–µ+ –ø–µ—Ä–µ–Ω–æ—Å—ã
        text = re.sub(r'[ \t]+', ' ', text)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        text = text.strip()
        
        return text if text else None
    
    async def _parse_channel_with_http(self, channel: str, hours_back: int = 24, limit: int = 50) -> List[RawPost]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å—ã –∫ t.me"""
        posts = []
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC timezone –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        cutoff_time = datetime.now(timezone.utc) - timedelta(hours=hours_back)
        logger.info(f"üïí –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ—Å—Ç—ã –Ω–æ–≤–µ–µ {cutoff_time.isoformat()} (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours_back}—á)")
        
        try:
            url = f"https://t.me/s/{channel}"
            logger.info(f"üåê –ü–æ–ø—ã—Ç–∫–∞ HTTP –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ {channel}: {url}")
            
            async with httpx.AsyncClient(timeout=30.0, follow_redirects=True) as client:
                response = await client.get(url)
                response.raise_for_status()
                
                soup = BeautifulSoup(response.text, 'html.parser')
                
                # –ò—â–µ–º –ø–æ—Å—Ç—ã –≤ HTML - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                post_elements = soup.find_all('div', class_='tgme_widget_message')
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å—Ç—ã —Å –∫–ª–∞—Å—Å–æ–º tgme_widget_message, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
                if not post_elements:
                    # –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                    post_elements = soup.find_all('div', class_='tgme_channel_post')
                    if not post_elements:
                        post_elements = soup.find_all('article')
                    if not post_elements:
                        post_elements = soup.find_all('div', class_='message')
                
                logger.info(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(post_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ—Å—Ç–æ–≤ –≤ HTML")
                
                # –ï—Å–ª–∏ –ø–æ—Å—Ç–æ–≤ –≤—Å–µ –µ—â–µ –Ω–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ –∫–∞–Ω–∞–ª —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                if not post_elements:
                    logger.warning(f"‚ö†Ô∏è –ü–æ—Å—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {response.url}. –í–æ–∑–º–æ–∂–Ω–æ, –∫–∞–Ω–∞–ª —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏–ª–∏ –∏–∑–º–µ–Ω–∏–ª —Å—Ç—Ä—É–∫—Ç—É—Ä—É.")
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–Ω–æ–ø–∫–∞ "View in Telegram" - —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ –Ω—É–∂–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                    view_button = soup.find('a', class_='tgme_action_button_new')
                    if view_button:
                        logger.info(f"üîí –ö–∞–Ω–∞–ª {channel} —Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Telegram –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å—Ç–æ–≤")
                    return []
                
                post_count = 0
                skipped_old = 0
                skipped_no_time = 0
                skipped_no_content = 0
                
                for element in post_elements[:limit]:
                    try:
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–æ—Å—Ç–∞ - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
                        post_link_elem = element.find('a', class_='tgme_widget_message_date')
                        if not post_link_elem:
                            # –ü—Ä–æ–±—É–µ–º –¥—Ä—É–≥–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ—Å—Ç
                            post_link_elem = element.find('a', href=True)
                        if not post_link_elem:
                            continue
                            
                        post_link = post_link_elem.get('href', '')
                        post_id = post_link.split('/')[-1] if post_link else str(post_count)
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è - –ø—Ä–æ–±—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤
                        post_time = None
                        time_elem = element.find('time')
                        
                        if time_elem and time_elem.get('datetime'):
                            datetime_str = time_elem['datetime']
                            try:
                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏
                                if datetime_str.endswith('Z'):
                                    post_time = datetime.fromisoformat(datetime_str.replace('Z', '+00:00'))
                                elif '+' in datetime_str or datetime_str.endswith('00'):
                                    post_time = datetime.fromisoformat(datetime_str)
                                else:
                                    # –ï—Å–ª–∏ –Ω–µ—Ç timezone info, —Å—á–∏—Ç–∞–µ–º UTC
                                    post_time = datetime.fromisoformat(datetime_str).replace(tzinfo=timezone.utc)
                                    
                                logger.debug(f"üìÖ –ü–æ—Å—Ç {post_id}: –≤—Ä–µ–º—è {post_time.isoformat()}")
                                
                            except Exception as e:
                                logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤—Ä–µ–º–µ–Ω–∏ '{datetime_str}' –¥–ª—è –ø–æ—Å—Ç–∞ {post_id}: {e}")
                                post_time = None
                        
                        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Å—Ç
                        if post_time is None:
                            logger.debug(f"‚è∞ –ü–æ—Å—Ç {post_id}: –≤—Ä–µ–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            skipped_no_time += 1
                            continue
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                        if post_time < cutoff_time:
                            logger.debug(f"üïí –ü–æ—Å—Ç {post_id}: —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä—ã–π ({post_time.isoformat()}), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                            skipped_old += 1
                            continue
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                        text_elem = element.find('div', class_='tgme_widget_message_text')
                        if not text_elem:
                            text_elem = element.find('div', class_='message_text')
                        if not text_elem:
                            text_elem = element.find('div', class_='post_content')
                        
                        post_text = self._extract_formatted_text(text_elem)
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ–¥–∏–∞ - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                        has_media = bool(
                            element.find('a', class_='tgme_widget_message_photo_wrap') or 
                                       element.find('video') or 
                            element.find('div', class_='tgme_widget_message_video') or
                            element.find('img') or
                            element.find('div', class_='media')
                        )
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç
                        # –ú–µ–¥–∏–∞-–ø–æ—Å—Ç—ã –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –Ω–µ –Ω–µ—Å—É—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏
                        if post_text and len(post_text.strip()) > 10:  # –ú–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
                            post = RawPost(
                                id=f"{channel}_http_{post_id}_{int(post_time.timestamp())}",
                                channel_name=channel,
                                publication_datetime=post_time.isoformat(),
                                post_link=post_link or f"https://t.me/{channel}/{post_id}",
                                post_text=post_text,
                                has_media=has_media
                            )
                            posts.append(post)
                            post_count += 1
                            logger.debug(f"‚úÖ –ü–æ—Å—Ç {post_id}: –¥–æ–±–∞–≤–ª–µ–Ω ({post_time.isoformat()})")
                        else:
                            logger.debug(f"‚è≠Ô∏è –ü–æ—Å—Ç {post_id}: –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)")
                            skipped_no_content += 1
                            
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ {channel}: {e}")
                        continue
                
                logger.info(f"‚úÖ HTTP: –Ω–∞–π–¥–µ–Ω–æ {post_count} –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ {channel}")
                logger.info(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ø—Ä–æ–ø—É—â–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö: {skipped_old}, –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏: {skipped_no_time}, –±–µ–∑ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {skipped_no_content}")
                return posts
                
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è HTTP –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel}: {e}")
            return []
    
    async def parse_channel(self, channel: str, hours_back: int = 24, limit: int = 50) -> List[RawPost]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞"""
        return await self._parse_channel_with_http(channel, hours_back, limit)
    
    async def parse_channels(self, channels: List[str], hours_back: int = 24, limit: int = 50) -> List[RawPost]:
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ {len(channels)} –∫–∞–Ω–∞–ª–æ–≤...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        tasks = [
            self.parse_channel(channel, hours_back, limit) 
            for channel in channels
        ]
        
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–æ—Å—Ç—ã
        all_posts = []
        successful_channels = 0
        failed_channels = 0
        
        for i, result in enumerate(results):
            if isinstance(result, Exception):
                logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–∞–Ω–∞–ª–∞ {channels[i]}: {str(result)}")
                failed_channels += 1
            elif len(result) == 0:
                logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channels[i]} –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Å—Ç–æ–≤ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
                failed_channels += 1
            else:
                all_posts.extend(result)
                successful_channels += 1
                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channels[i]}: –ø–æ–ª—É—á–µ–Ω–æ {len(result)} –ø–æ—Å—Ç–æ–≤")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
        all_posts.sort(
            key=lambda x: datetime.fromisoformat(x.publication_datetime), 
            reverse=True
        )
        
        logger.info(f"‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω: {len(all_posts)} —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤")
        logger.info(f"üéØ –£—Å–ø–µ—à–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {successful_channels}/{len(channels)}")
        logger.info(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {failed_channels}/{len(channels)}")
        
        return all_posts
    
    def __del__(self):
        if hasattr(self, 'executor'):
            self.executor.shutdown(wait=True) 